@{
    ViewData["Title"] = "Relax Hotel | Dashboard";
}


@{
    // Extract counts from ViewBag
    int reservationCount = ViewBag.ReservationCount;
    int roomCount = ViewBag.RoomCount;
    int customerCount = ViewBag.CustomerCount;
    int employeeCount = ViewBag.EmployeeCount;
    int billingsCount = ViewBag.BillingsCount;
    int userCount = ViewBag.UserCount;

    // Analyze ReservationCount
    string reservationMessage = reservationCount == 0 ? "No new bookings today." :
                               reservationCount <= 10 ? "Low number of new bookings." :
                               reservationCount <= 50 ? "Moderate number of new bookings." :
                               "High number of new bookings!";

    // Analyze RoomCount
    string roomMessage = roomCount == 0 ? "No rooms available." :
                         roomCount <= 20 ? "Limited rooms available." :
                         "Sufficient rooms available.";

    // Analyze CustomerCount
    string customerMessage = customerCount == 0 ? "No customers registered." :
                             customerCount <= 50 ? "Small customer base." :
                             customerCount <= 200 ? "Moderate customer base." :
                             "Large customer base!";

    // Analyze EmployeeCount
    string employeeMessage = employeeCount == 0 ? "No employees registered." :
                             employeeCount <= 10 ? "Small team." :
                             employeeCount <= 50 ? "Moderate team size." :
                             "Large team!";

    // Analyze BillingsCount
    string billingsMessage = billingsCount == 0 ? "No payments processed today." :
                             billingsCount <= 20 ? "Low number of payments processed." :
                             billingsCount <= 100 ? "Moderate number of payments processed." :
                             "High number of payments processed!";

    // Analyze UserCount
    string userMessage = userCount == 0 ? "No users in the system." :
                         userCount <= 10 ? "Small number of users." :
                         userCount <= 50 ? "Moderate number of users." :
                         "Large number of users!";
}

<!-- Dashboard Cards -->
<div class="row">
    <!-- New Booking -->
    <div class="col-md-4 mb-4">
        <div class="card shadow">
            <div class="card-body">
                <h5 class="card-title d-flex align-items-center">
                    <i class="bi bi-calendar-plus me-2"></i> New Bookings
                </h5>
                <h2 class="fw-bold">@reservationCount</h2>
                <p class="mb-0">@reservationMessage</p>
            </div>
        </div>
    </div>

    <!-- Total Rooms -->
    <div class="col-md-4 mb-4">
        <div class="card shadow">
            <div class="card-body">
                <h5 class="card-title d-flex align-items-center">
                    <i class="bi bi-door-open me-2"></i> Total Rooms
                </h5>
                <h2 class="fw-bold">@roomCount</h2>
                <p class="mb-0">@roomMessage</p>
            </div>
        </div>
    </div>

    <!-- Customers -->
    <div class="col-md-4 mb-4">
        <div class="card shadow">
            <div class="card-body">
                <h5 class="card-title d-flex align-items-center">
                    <i class="bi bi-people me-2"></i> Customers
                </h5>
                <h2 class="fw-bold">@customerCount</h2>
                <p class="mb-0">@customerMessage</p>
            </div>
        </div>
    </div>

    <!-- Employees -->
    <div class="col-md-4 mb-4">
        <div class="card shadow">
            <div class="card-body">
                <h5 class="card-title d-flex align-items-center">
                    <i class="bi bi-person-workspace me-2"></i> Employees
                </h5>
                <h2 class="fw-bold">@employeeCount</h2>
                <p class="mb-0">@employeeMessage</p>
            </div>
        </div>
    </div>

    <!-- Payments -->
    <div class="col-md-4 mb-4">
        <div class="card shadow">
            <div class="card-body">
                <h5 class="card-title d-flex align-items-center">
                    <i class="bi bi-cash-coin me-2"></i> Payments
                </h5>
                <h2 class="fw-bold">@billingsCount</h2>
                <p class="mb-0">@billingsMessage</p>
            </div>
        </div>
    </div>

    <!-- Users -->
    <div class="col-md-4 mb-4">
        <div class="card shadow">
            <div class="card-body">
                <h5 class="card-title d-flex align-items-center">
                    <i class="bi bi-person-circle me-2"></i> Users
                </h5>
                <h2 class="fw-bold">@userCount</h2>
                <p class="mb-0">@userMessage</p>
            </div>
        </div>
    </div>
</div>

<!-- Reservation Statistics with Line Chart -->
<div class="row mt-4">
    <div class="col-md-12">
        <div class="card shadow">
            <div class="card-body">
                <div class="d-flex align-items-center gap-2">
                    <span class="fs-5">Reservation Statistic</span>
                    <span class="fw-bold fs-5">@ViewBag.CheckInCount</span>
                    <span class="text-secondary">Check In</span>
                    <span class="fw-bold fs-5">@ViewBag.CheckOutCount</span>
                    <span class="text-secondary">Check Out</span>
                </div>
                <section class="charts">
                    <div class="chart-container">
                        <canvas id="lineChart"></canvas>
                    </div>
                </section>
            </div>
        </div>
    </div>
</div>

<!-- Chart.js for Graphs -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Initialize Line Chart
        const lineCtx = document.getElementById('lineChart').getContext('2d');
        const lineChart = new Chart(lineCtx, {
            type: 'line', // Specify chart type
            data: {
                labels: ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10'], // X-axis labels
                datasets: [
                    {
                        label: 'Check In', // Dataset label
                        data: [@ViewBag.CheckInDay1, @ViewBag.CheckInDay2, @ViewBag.CheckInDay3, @ViewBag.CheckInDay4, @ViewBag.CheckInDay5, @ViewBag.CheckInDay6, @ViewBag.CheckInDay7, @ViewBag.CheckInDay8, @ViewBag.CheckInDay9, @ViewBag.CheckInDay10], // Data points from ViewBag
                        backgroundColor: 'rgba(74, 144, 226, 0.2)', // Fill color below the line
                        borderColor: 'rgba(74, 144, 226, 1)', // Line color
                        borderWidth: 2, // Line width
                        tension: 0.4 // Curvature of the line
                    },
                    {
                        label: 'Check Out', // Dataset label
                        data: [@ViewBag.CheckOutDay1, @ViewBag.CheckOutDay2, @ViewBag.CheckOutDay3, @ViewBag.CheckOutDay4, @ViewBag.CheckOutDay5, @ViewBag.CheckOutDay6, @ViewBag.CheckOutDay7, @ViewBag.CheckOutDay8, @ViewBag.CheckOutDay9, @ViewBag.CheckOutDay10], // Data points from ViewBag
                        backgroundColor: 'rgba(255, 159, 64, 0.2)', // Fill color below the line
                        borderColor: 'rgba(255, 159, 64, 1)', // Line color
                        borderWidth: 2, // Line width
                        tension: 0.4 // Curvature of the line
                    }
                ]
            },
            options: {
                responsive: true, // Chart responsiveness
                animation: {
                    duration: 1000, // Animation duration in ms
                    easing: 'easeInOutQuart' // Animation easing function
                },
                plugins: {
                    legend: {
                        display: true, // Display the legend
                        position: 'top' // Position of the legend
                    }
                },
                scales: {
                    x: {
                        grid: {
                            display: false // Hide vertical grid lines
                        }
                    }
                }
            }
        });
    });
</script>